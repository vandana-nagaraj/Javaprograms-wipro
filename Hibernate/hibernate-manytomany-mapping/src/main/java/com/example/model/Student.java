package com.example.model;

import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;

@Entity
@Table(name="students")
public class Student {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	private String name;
	
	/*//Unidirectional one-to-one mapping with ReportCard
	@OneToOne(cascade=CascadeType.ALL)
	@JoinColumn(name="reportcard_id") // fk in Student table ( which shows that student has a reference of Report Card)
	private ReportCard reportcard;*/
	
	//Unidirectional many-to-many mapping with courses
	@ManyToMany(cascade=CascadeType.ALL)
	@JoinTable(name="student_course" , joinColumns=@JoinColumn(name="student_id"),inverseJoinColumns=@JoinColumn(name="course_id")) //will create a separate table 
	private List<Course> courses = new ArrayList<>();
	
   /* bidirectional 
	@OneToMany(mappedBy="student" , cascade=CascadeType.ALL)
	private List<Course> courses = new ArrayList<>();
*/
	 
	public Student() {
		super();
		// TODO Auto-generated constructor stub
	}

	// id will autogenerated and report card we will get from child entity
	public Student(String name) {
		super();
		this.name = name;
	}

	// getter  & setter injection will take place
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	/*public ReportCard getReportcard() {
		return reportcard;
	}

	public void setReportcard(ReportCard reportcard) {
		this.reportcard = reportcard;
	}*/
	
	public void addCourse(Course c)
	{
		this.courses.add(c);
		
		c.getStudents().add(this); //  do the synchronization for both sides 
		/* for bidirectional
		c.setStudent(this);
		*/
	}

	public List<Course> getCourses() {
		
		return courses;
	}

	

//	@Override
//	public String toString() {
//		return "Student [id=" + id + ", name=" + name + ", reportcard=" + reportcard + "]";
//	}
	
	
//	@Override
//	public String toString() {
//		return "Student [id=" + id + ", name=" + name + "]";
//	}
	
	

}
